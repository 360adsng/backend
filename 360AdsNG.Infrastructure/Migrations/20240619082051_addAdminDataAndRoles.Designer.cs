// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _360AdsNG.Infrastructure.Persistence;

#nullable disable

namespace _360AdsNG.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240619082051_addAdminDataAndRoles")]
    partial class addAdminDataAndRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin_id",
                            RoleId = "C7D92975-6187-4A4A-AA7A-2CDE79566E27"
                        },
                        new
                        {
                            UserId = "user_id_1",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_2",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_3",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_4",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_5",
                            RoleId = "588731E6-8914-4A5F-8385-7218ED3241E1"
                        },
                        new
                        {
                            UserId = "user_id_6",
                            RoleId = "588731E6-8914-4A5F-8385-7218ED3241E1"
                        },
                        new
                        {
                            UserId = "user_id_7",
                            RoleId = "588731E6-8914-4A5F-8385-7218ED3241E1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            City = "Admin City",
                            Country = "Admin Country",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6348), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 78.909999999999997,
                            Longitude = 100.111,
                            State = "Admin State",
                            Street = "123 Admin St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6350), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "1",
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6356), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 78.909999999999997,
                            Longitude = 123.456,
                            State = "Stateville",
                            Street = "123 Main St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6356), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "2",
                            City = "Townsville",
                            Country = "Anotherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6361), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 12.345000000000001,
                            Longitude = 45.677999999999997,
                            State = "Countyville",
                            Street = "456 Elm St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6361), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "3",
                            City = "Villagetown",
                            Country = "Otherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6366), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 67.890000000000001,
                            Longitude = 90.123000000000005,
                            State = "Provinceville",
                            Street = "789 Oak St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6366), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "4",
                            City = "Hamletville",
                            Country = "Someland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6377), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 89.012,
                            Longitude = 34.567,
                            State = "Territorytown",
                            Street = "1011 Pine St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6377), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "5",
                            City = "Countryside",
                            Country = "Landofthefree",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6382), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 23.456,
                            Longitude = 56.789000000000001,
                            State = "Districtville",
                            Street = "1213 Cedar St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6390), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "6",
                            City = "Settlementtown",
                            Country = "Everywhere",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6403), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 34.567,
                            Longitude = 78.900999999999996,
                            State = "Municipality",
                            Street = "1415 Birch St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6403), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "7",
                            City = "Hollowville",
                            Country = "Otherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6407), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 90.123000000000005,
                            Longitude = 12.345000000000001,
                            State = "Territorytown",
                            Street = "1617 Maple St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6408), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Billboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DailyImpressions")
                        .HasColumnType("integer");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationPerDisplay")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Negotiable")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orientation")
                        .HasColumnType("integer");

                    b.Property<string>("PixelSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrafficDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Billboards");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AddressId = "1",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6554), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "10x20",
                            DurationPerDisplay = 10,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Urban-Billboard-Design-Example.jpg",
                            Name = "Billboard 1",
                            Negotiable = 0,
                            Note = "Additional notes",
                            Orientation = 1,
                            PixelSize = "1080p",
                            Price = 100,
                            Time = "Day",
                            TrafficDescription = "High traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6555), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_1"
                        },
                        new
                        {
                            Id = "2",
                            AddressId = "2",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6561), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 800,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Street-Billboard-Design-Example.jpg",
                            Name = "Billboard 2",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 0,
                            PixelSize = "4k",
                            Price = 150,
                            Time = "Night",
                            TrafficDescription = "Moderate traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6562), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_2"
                        },
                        new
                        {
                            Id = "3",
                            AddressId = "3",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6567), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/School-Billboard-Design-Example.jpg",
                            Name = "Billboard 3",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 1,
                            PixelSize = "4k",
                            Price = 250,
                            Time = "Night",
                            TrafficDescription = "Moderate traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6568), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_3"
                        },
                        new
                        {
                            Id = "4",
                            AddressId = "4",
                            BoardType = "Dynamic",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6572), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Metal-Billboard-Design-Example.jpg",
                            Name = "Billboard 4",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 1,
                            PixelSize = "4k",
                            Price = 250,
                            Time = "Night",
                            TrafficDescription = "Metal Billboard traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 658, DateTimeKind.Unspecified).AddTicks(6573), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_4"
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin_id",
                            AccessFailedCount = 0,
                            AddressId = "0",
                            ConcurrencyStamp = "15d239af-d32c-4e37-a637-ee004a485b99",
                            ConfirmPassword = "Admin@123",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 707, DateTimeKind.Unspecified).AddTicks(6736), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            Password = "Admin@123",
                            PasswordHash = "AQAAAAIAAYagAAAAELX9r5SFj/TsKZt5yhgKrQV+aWJaQJvPL+tjRxu8DL1MAFupfpKBQ6cj7UQGNuF2/A==",
                            PhoneNumber = "08130990162",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_0",
                            SecurityStamp = "c5d88764-89e9-4c12-a14a-fd88c9758785",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 707, DateTimeKind.Unspecified).AddTicks(6743), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "user_id_1",
                            AccessFailedCount = 0,
                            AddressId = "1",
                            BusinessName = "ABC Company",
                            ConcurrencyStamp = "f89fe82f-5fd9-4cc9-9a0e-5b9be0fc87aa",
                            ConfirmPassword = "Password@123",
                            ContactName = "Jane Doe",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 758, DateTimeKind.Unspecified).AddTicks(6947), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "john.doe@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            ImageUrl = "https://images.unsplash.com/photo-1633332755192-727a05c4013d?q=80&w=1780&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@GMAIL.COM",
                            NormalizedUserName = "JOHN.DOE@GMAIL.COM",
                            Occupation = "Developer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAwqvYPIgeCjJ2a44CCeBUpKAJUWpk/LDdGah+EiCEvf0XOIlgsNoTbXMBYQXm9ozA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_1",
                            SecurityStamp = "87576d5a-c18e-4a19-a976-42cb57c6a82f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 758, DateTimeKind.Unspecified).AddTicks(6955), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "john.doe@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_2",
                            AccessFailedCount = 0,
                            AddressId = "2",
                            BusinessName = "XYZ Company",
                            ConcurrencyStamp = "16d2aa2d-ccff-4d75-8735-2abe33cf03ea",
                            ConfirmPassword = "Password@123",
                            ContactName = "John Smith",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 809, DateTimeKind.Unspecified).AddTicks(7696), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alice.smith@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            ImageUrl = "https://unsplash.com/photos/closeup-photography-of-woman-smiling-mEZ3PoFGs_k",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@GMAIL.COM",
                            NormalizedUserName = "ALICE.SMITH@GMAIL.COM",
                            Occupation = "Designer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDDZ7VNL2cM6fjsI98wD8DV3RoqF35+ZJhIoixY2hjtAGDdjXJtkHVvCltdNdQNJw==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_2",
                            SecurityStamp = "cbcece57-b1f9-49e4-9213-4ace74ced2fb",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 809, DateTimeKind.Unspecified).AddTicks(7702), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "alice.smith@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_3",
                            AccessFailedCount = 0,
                            AddressId = "3",
                            BusinessName = "EFG Enterprises",
                            ConcurrencyStamp = "491a5c55-778e-4750-b1c3-66867609a500",
                            ConfirmPassword = "Password@123",
                            ContactName = "Michael Johnson",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 860, DateTimeKind.Unspecified).AddTicks(7094), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emily.johnson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            ImageUrl = "https://www.istockphoto.com/photo/headshot-portrait-of-smiling-male-employee-in-office-gm1309328823-399075075",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.JOHNSON@GMAIL.COM",
                            NormalizedUserName = "EMILY.JOHNSON@GMAIL.COM",
                            Occupation = "Writer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1d/tikh8m/47JWYV5grTILo7r1gKoJlO//kIcOgMDdDZr04LUqzgcdl0vkyCVniw==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_3",
                            SecurityStamp = "f7d5deaa-d065-43f9-99b3-9efefc9211f4",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 860, DateTimeKind.Unspecified).AddTicks(7099), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emily.johnson@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_4",
                            AccessFailedCount = 0,
                            AddressId = "4",
                            BusinessName = "DB Tech",
                            ConcurrencyStamp = "4e4bff9f-7a2e-41c1-89ad-7bdb4e32f31b",
                            ConfirmPassword = "Password@123",
                            ContactName = "Emma Brown",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 904, DateTimeKind.Unspecified).AddTicks(9998), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "david.brown@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            ImageUrl = "https://example.com/david.jpg",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@GMAIL.COM",
                            NormalizedUserName = "DAVID.BROWN@GMAIL.COM",
                            Occupation = "Engineer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIz9Bm0yekVhNnBseR0y4jw3GddedQyhcbwHbRVrhFZyLn6YOkN9jm4PpNuW2+hDUg==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_4",
                            SecurityStamp = "0295656c-76ae-417c-af8a-235843bacb8b",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 905, DateTimeKind.Unspecified).AddTicks(4), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "david.brown@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_5",
                            AccessFailedCount = 0,
                            AddressId = "5",
                            BusinessName = "Artistic Creations",
                            ConcurrencyStamp = "eba98548-ee4f-4f6a-a140-60b2c9b19ee8",
                            ConfirmPassword = "Password@123",
                            ContactName = "Daniel Martinez",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 950, DateTimeKind.Unspecified).AddTicks(7104), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sophia.martinez@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            ImageUrl = "https://example.com/sophia.jpg",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIA.MARTINEZ@GMAIL.COM",
                            NormalizedUserName = "SOPHIA.MARTINEZ@GMAIL.COM",
                            Occupation = "Artist",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvZ2Ga1VA8zQjERe0PGsqzfwGju5V84YK5vpgjsfy7ps7qA6+6O7z4I5GHoSqXEWA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_5",
                            SecurityStamp = "ec2fd4b7-e87c-4300-92a3-8ab6bbc5818a",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 950, DateTimeKind.Unspecified).AddTicks(7108), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "sophia.martinez@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_6",
                            AccessFailedCount = 0,
                            AddressId = "6",
                            BusinessName = "Lee Marketing Solutions",
                            ConcurrencyStamp = "c6b8e6bc-9c2f-4ab2-bae7-a3987f0ee422",
                            ConfirmPassword = "Password@123",
                            ContactName = "Olivia Lee",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 995, DateTimeKind.Unspecified).AddTicks(6137), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "james.lee@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            ImageUrl = "https://example.com/james.jpg",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.LEE@GMAIL.COM",
                            NormalizedUserName = "JAMES.LEE@GMAIL.COM",
                            Occupation = "Marketing Manager",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAED/4icpi1oYrL753/ECMA+HCXLifnIMj+19KFHf3J+1DGSH6HI3ruIkVAKb3+D8I5Q==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_6",
                            SecurityStamp = "000296ba-6b58-42d4-a109-67953b42bfef",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 50, 995, DateTimeKind.Unspecified).AddTicks(6138), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "james.lee@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_7",
                            AccessFailedCount = 0,
                            AddressId = "7",
                            BusinessName = "Educational Institute",
                            ConcurrencyStamp = "48f47508-cbd5-43a0-a5b4-6e2f0602da9d",
                            ConfirmPassword = "Password@123",
                            ContactName = "Noah Wilson",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4203), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emma.wilson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emma",
                            ImageUrl = "https://example.com/emma.jpg",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.WILSON@GMAIL.COM",
                            NormalizedUserName = "EMMA.WILSON@GMAIL.COM",
                            Occupation = "Teacher",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNgq/ZU9Clh61IGzxKt9BpdYm20OjJdqK/pfv1CpsYvD9io4cxaG6gk9+ricGXygA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_7",
                            SecurityStamp = "61ebf221-e993-41a1-b468-8857870bf7b3",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4204), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emma.wilson@gmail.com"
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AddressId = "1",
                            CompanyName = "Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4677), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4679), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_1",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "2",
                            AddressId = "2",
                            CompanyName = "Second Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4683), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4685), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_2",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "3",
                            AddressId = "3",
                            CompanyName = "Third Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4689), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4690), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_3",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "4",
                            AddressId = "4",
                            CompanyName = "Fourth Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4694), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 20, 51, 42, DateTimeKind.Unspecified).AddTicks(4696), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_4",
                            VendorType = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Billboard", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_360AdsNG.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.User", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("_360AdsNG.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
