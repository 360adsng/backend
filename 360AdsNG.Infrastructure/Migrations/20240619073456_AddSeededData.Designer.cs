// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _360AdsNG.Infrastructure.Persistence;

#nullable disable

namespace _360AdsNG.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240619073456_AddSeededData")]
    partial class AddSeededData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            City = "Admin City",
                            Country = "Admin Country",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3884), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 78.909999999999997,
                            Longitude = 100.111,
                            State = "Admin State",
                            Street = "123 Admin St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3885), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "1",
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3890), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 78.909999999999997,
                            Longitude = 123.456,
                            State = "Stateville",
                            Street = "123 Main St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3891), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "2",
                            City = "Townsville",
                            Country = "Anotherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3896), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 12.345000000000001,
                            Longitude = 45.677999999999997,
                            State = "Countyville",
                            Street = "456 Elm St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3896), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "3",
                            City = "Villagetown",
                            Country = "Otherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3900), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 67.890000000000001,
                            Longitude = 90.123000000000005,
                            State = "Provinceville",
                            Street = "789 Oak St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3901), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "4",
                            City = "Hamletville",
                            Country = "Someland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3905), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 89.012,
                            Longitude = 34.567,
                            State = "Territorytown",
                            Street = "1011 Pine St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3906), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "5",
                            City = "Countryside",
                            Country = "Landofthefree",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3910), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 23.456,
                            Longitude = 56.789000000000001,
                            State = "Districtville",
                            Street = "1213 Cedar St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3910), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "6",
                            City = "Settlementtown",
                            Country = "Everywhere",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3918), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 34.567,
                            Longitude = 78.900999999999996,
                            State = "Municipality",
                            Street = "1415 Birch St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3919), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "7",
                            City = "Hollowville",
                            Country = "Otherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3931), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 90.123000000000005,
                            Longitude = 12.345000000000001,
                            State = "Territorytown",
                            Street = "1617 Maple St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(3936), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Billboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DailyImpressions")
                        .HasColumnType("integer");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationPerDisplay")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Negotiable")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orientation")
                        .HasColumnType("integer");

                    b.Property<string>("PixelSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrafficDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Billboards");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AddressId = "1",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4047), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "10x20",
                            DurationPerDisplay = 10,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Urban-Billboard-Design-Example.jpg",
                            Name = "Billboard 1",
                            Negotiable = 0,
                            Note = "Additional notes",
                            Orientation = 1,
                            PixelSize = "1080p",
                            Price = 100,
                            Time = "Day",
                            TrafficDescription = "High traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4048), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_1"
                        },
                        new
                        {
                            Id = "2",
                            AddressId = "2",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4053), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 800,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Street-Billboard-Design-Example.jpg",
                            Name = "Billboard 2",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 0,
                            PixelSize = "4k",
                            Price = 150,
                            Time = "Night",
                            TrafficDescription = "Moderate traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4054), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_2"
                        },
                        new
                        {
                            Id = "3",
                            AddressId = "3",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4059), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/School-Billboard-Design-Example.jpg",
                            Name = "Billboard 3",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 1,
                            PixelSize = "4k",
                            Price = 250,
                            Time = "Night",
                            TrafficDescription = "Moderate traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4059), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_3"
                        },
                        new
                        {
                            Id = "4",
                            AddressId = "4",
                            BoardType = "Dynamic",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4064), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Metal-Billboard-Design-Example.jpg",
                            Name = "Billboard 4",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 1,
                            PixelSize = "4k",
                            Price = 250,
                            Time = "Night",
                            TrafficDescription = "Metal Billboard traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 652, DateTimeKind.Unspecified).AddTicks(4065), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_4"
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user_id_1",
                            AccessFailedCount = 0,
                            AddressId = "1",
                            BusinessName = "ABC Company",
                            ConcurrencyStamp = "ca8cf467-9b9c-4674-ab15-74380d128c5a",
                            ConfirmPassword = "Password@123",
                            ContactName = "Jane Doe",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 711, DateTimeKind.Unspecified).AddTicks(6857), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "john.doe@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            ImageUrl = "https://images.unsplash.com/photo-1633332755192-727a05c4013d?q=80&w=1780&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@GMAIL.COM",
                            NormalizedUserName = "JOHN.DOE@GMAIL.COM",
                            Occupation = "Developer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOr1I72wwp8Ic/rp6PECghI/+eXi7ZpMFF5MhJYR5+rKbB2ZhIPRl5Zi5Ums8WGceg==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_1",
                            SecurityStamp = "0e33e7c4-ae32-430d-bf69-5c42e1fc0b83",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 711, DateTimeKind.Unspecified).AddTicks(6861), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "john.doe@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_2",
                            AccessFailedCount = 0,
                            AddressId = "2",
                            BusinessName = "XYZ Company",
                            ConcurrencyStamp = "a57683bf-eeac-45c9-9cc2-21eb177a71e1",
                            ConfirmPassword = "Password@123",
                            ContactName = "John Smith",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 756, DateTimeKind.Unspecified).AddTicks(8532), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alice.smith@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            ImageUrl = "https://unsplash.com/photos/closeup-photography-of-woman-smiling-mEZ3PoFGs_k",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@GMAIL.COM",
                            NormalizedUserName = "ALICE.SMITH@GMAIL.COM",
                            Occupation = "Designer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoOijBxbxyxsUOllATV1YImd/cGsP+gjAJVjmcx3mijw9iQH0DKtKhSzkM6VY4ASA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_2",
                            SecurityStamp = "5f597a6a-1da2-4520-9267-3b54048a15b2",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 756, DateTimeKind.Unspecified).AddTicks(8537), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "alice.smith@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_3",
                            AccessFailedCount = 0,
                            AddressId = "3",
                            BusinessName = "EFG Enterprises",
                            ConcurrencyStamp = "588a0fd3-db80-4856-8c24-2606a1e3e51f",
                            ConfirmPassword = "Password@123",
                            ContactName = "Michael Johnson",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 802, DateTimeKind.Unspecified).AddTicks(4087), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emily.johnson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            ImageUrl = "https://www.istockphoto.com/photo/headshot-portrait-of-smiling-male-employee-in-office-gm1309328823-399075075",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.JOHNSON@GMAIL.COM",
                            NormalizedUserName = "EMILY.JOHNSON@GMAIL.COM",
                            Occupation = "Writer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAECvpJq30sJmR7ke2WJ0kyIjm+VA+MFUdjq35M30zl51mOyMBAF6HnItRBcKVOJsVHQ==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_3",
                            SecurityStamp = "a896168d-6d93-43c8-a9e2-b6294790bd2c",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 802, DateTimeKind.Unspecified).AddTicks(4092), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emily.johnson@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_4",
                            AccessFailedCount = 0,
                            AddressId = "4",
                            BusinessName = "DB Tech",
                            ConcurrencyStamp = "ea34bf0e-3df7-49c6-8177-6d6b9f922827",
                            ConfirmPassword = "Password@123",
                            ContactName = "Emma Brown",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 849, DateTimeKind.Unspecified).AddTicks(4539), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "david.brown@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            ImageUrl = "https://example.com/david.jpg",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@GMAIL.COM",
                            NormalizedUserName = "DAVID.BROWN@GMAIL.COM",
                            Occupation = "Engineer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAED5B/288nusnLrVKSqBhn/ayLq2hKR5Vz/pVdm4LkfrpySMw3CaT9Rl2cLoIklIDcw==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_4",
                            SecurityStamp = "47d7dbef-c265-4f4d-81e4-5f2e65e5005c",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 849, DateTimeKind.Unspecified).AddTicks(4547), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "david.brown@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_5",
                            AccessFailedCount = 0,
                            AddressId = "5",
                            BusinessName = "Artistic Creations",
                            ConcurrencyStamp = "8e233a28-d5f1-4a2b-9078-eea747e854eb",
                            ConfirmPassword = "Password@123",
                            ContactName = "Daniel Martinez",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 895, DateTimeKind.Unspecified).AddTicks(1849), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sophia.martinez@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            ImageUrl = "https://example.com/sophia.jpg",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIA.MARTINEZ@GMAIL.COM",
                            NormalizedUserName = "SOPHIA.MARTINEZ@GMAIL.COM",
                            Occupation = "Artist",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAELTo39wELgHjOxgMUDK+5I5AdtroX55/psf7VMZFU9ROMgQiTjXS5nYsGEJ80gmctQ==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_5",
                            SecurityStamp = "edae1ac4-307e-43e2-a3c7-eb3abcd4269e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 895, DateTimeKind.Unspecified).AddTicks(1851), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "sophia.martinez@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_6",
                            AccessFailedCount = 0,
                            AddressId = "6",
                            BusinessName = "Lee Marketing Solutions",
                            ConcurrencyStamp = "f82b5f40-a110-4d17-9254-bbc2fb576c32",
                            ConfirmPassword = "Password@123",
                            ContactName = "Olivia Lee",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 941, DateTimeKind.Unspecified).AddTicks(6746), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "james.lee@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            ImageUrl = "https://example.com/james.jpg",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.LEE@GMAIL.COM",
                            NormalizedUserName = "JAMES.LEE@GMAIL.COM",
                            Occupation = "Marketing Manager",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOOWDdmqLjXka+fG35DtAoHp21UjGbjhRQ7cBeglNK3+6gAgPMQCyY7Qo7GTSIsluQ==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_6",
                            SecurityStamp = "66f24dd8-0068-4304-8f6c-e9d519679477",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 941, DateTimeKind.Unspecified).AddTicks(6747), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "james.lee@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_7",
                            AccessFailedCount = 0,
                            AddressId = "7",
                            BusinessName = "Educational Institute",
                            ConcurrencyStamp = "72340568-1559-485d-b543-8df5eeaa916b",
                            ConfirmPassword = "Password@123",
                            ContactName = "Noah Wilson",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4019), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emma.wilson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emma",
                            ImageUrl = "https://example.com/emma.jpg",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.WILSON@GMAIL.COM",
                            NormalizedUserName = "EMMA.WILSON@GMAIL.COM",
                            Occupation = "Teacher",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPEnHYKh/smxUfrbaGQH/cTm1yU9oZvPqv2huqbN5vrFeXRqyF3a7+bnq8ywaMw0/A==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_7",
                            SecurityStamp = "8e56b238-911d-44c1-8b0b-570de93f5902",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4024), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emma.wilson@gmail.com"
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AddressId = "1",
                            CompanyName = "Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4590), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4592), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_1",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "2",
                            AddressId = "2",
                            CompanyName = "Second Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4603), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4604), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_2",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "3",
                            AddressId = "3",
                            CompanyName = "Third Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4608), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4609), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_3",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "4",
                            AddressId = "4",
                            CompanyName = "Fourth Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4667), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 7, 34, 55, 985, DateTimeKind.Unspecified).AddTicks(4668), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_4",
                            VendorType = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Billboard", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_360AdsNG.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.User", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("_360AdsNG.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
