// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _360AdsNG.Infrastructure.Persistence;

#nullable disable

namespace _360AdsNG.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin_id",
                            RoleId = "C7D92975-6187-4A4A-AA7A-2CDE79566E27"
                        },
                        new
                        {
                            UserId = "user_id_1",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_2",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_3",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_4",
                            RoleId = "8E4D3983-F718-4A22-AA52-3C59BCA7ABA4"
                        },
                        new
                        {
                            UserId = "user_id_5",
                            RoleId = "588731E6-8914-4A5F-8385-7218ED3241E1"
                        },
                        new
                        {
                            UserId = "user_id_6",
                            RoleId = "588731E6-8914-4A5F-8385-7218ED3241E1"
                        },
                        new
                        {
                            UserId = "user_id_7",
                            RoleId = "588731E6-8914-4A5F-8385-7218ED3241E1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            City = "Admin City",
                            Country = "Admin Country",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6410), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 78.909999999999997,
                            Longitude = 100.111,
                            State = "Admin State",
                            Street = "123 Admin St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6412), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "1",
                            City = "Cityville",
                            Country = "Countryland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6418), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 78.909999999999997,
                            Longitude = 123.456,
                            State = "Stateville",
                            Street = "123 Main St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6418), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "2",
                            City = "Townsville",
                            Country = "Anotherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6424), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 12.345000000000001,
                            Longitude = 45.677999999999997,
                            State = "Countyville",
                            Street = "456 Elm St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6424), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "3",
                            City = "Villagetown",
                            Country = "Otherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6429), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 67.890000000000001,
                            Longitude = 90.123000000000005,
                            State = "Provinceville",
                            Street = "789 Oak St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6430), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "4",
                            City = "Hamletville",
                            Country = "Someland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6439), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 89.012,
                            Longitude = 34.567,
                            State = "Territorytown",
                            Street = "1011 Pine St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6440), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "5",
                            City = "Countryside",
                            Country = "Landofthefree",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6445), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 23.456,
                            Longitude = 56.789000000000001,
                            State = "Districtville",
                            Street = "1213 Cedar St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6449), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "6",
                            City = "Settlementtown",
                            Country = "Everywhere",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6454), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 34.567,
                            Longitude = 78.900999999999996,
                            State = "Municipality",
                            Street = "1415 Birch St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6454), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = "7",
                            City = "Hollowville",
                            Country = "Otherland",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6467), new TimeSpan(0, 0, 0, 0, 0)),
                            Latitude = 90.123000000000005,
                            Longitude = 12.345000000000001,
                            State = "Territorytown",
                            Street = "1617 Maple St",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6468), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Billboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DailyImpressions")
                        .HasColumnType("integer");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationPerDisplay")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Negotiable")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Orientation")
                        .HasColumnType("integer");

                    b.Property<string>("PixelSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrafficDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Billboards");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AddressId = "1",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6663), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "10x20",
                            DurationPerDisplay = 10,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Urban-Billboard-Design-Example.jpg",
                            Name = "Billboard 1",
                            Negotiable = 0,
                            Note = "Additional notes",
                            Orientation = 1,
                            PixelSize = "1080p",
                            Price = 100,
                            Time = "Day",
                            TrafficDescription = "High traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6664), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_1"
                        },
                        new
                        {
                            Id = "2",
                            AddressId = "2",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6670), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 800,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Street-Billboard-Design-Example.jpg",
                            Name = "Billboard 2",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 0,
                            PixelSize = "4k",
                            Price = 150,
                            Time = "Night",
                            TrafficDescription = "Moderate traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6671), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_2"
                        },
                        new
                        {
                            Id = "3",
                            AddressId = "3",
                            BoardType = "Static",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6677), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/School-Billboard-Design-Example.jpg",
                            Name = "Billboard 3",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 1,
                            PixelSize = "4k",
                            Price = 250,
                            Time = "Night",
                            TrafficDescription = "Moderate traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6678), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_3"
                        },
                        new
                        {
                            Id = "4",
                            AddressId = "4",
                            BoardType = "Dynamic",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6683), new TimeSpan(0, 0, 0, 0, 0)),
                            DailyImpressions = 1000,
                            Dimension = "20x40",
                            DurationPerDisplay = 15,
                            ImageUrl = "https://images.examples.com/wp-content/uploads/2018/04/Metal-Billboard-Design-Example.jpg",
                            Name = "Billboard 4",
                            Negotiable = 1,
                            Note = "Some notes",
                            Orientation = 1,
                            PixelSize = "4k",
                            Price = 250,
                            Time = "Night",
                            TrafficDescription = "Metal Billboard traffic area",
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 418, DateTimeKind.Unspecified).AddTicks(6684), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_4"
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin_id",
                            AccessFailedCount = 0,
                            AddressId = "0",
                            ConcurrencyStamp = "6ddfb67d-b389-4d0f-b840-9e51ec439948",
                            ConfirmPassword = "Admin@123",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 468, DateTimeKind.Unspecified).AddTicks(9957), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            Password = "Admin@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/cgBcVtvIPidN9IaqeHPqWdxQkrraGrtJwDCucjJ6tt9Fe5x24EnjczbdNYQgQGA==",
                            PhoneNumber = "08130990162",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_0",
                            SecurityStamp = "6cda5d40-e8f4-4723-b8ee-507f924952a0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 468, DateTimeKind.Unspecified).AddTicks(9962), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "user_id_1",
                            AccessFailedCount = 0,
                            AddressId = "1",
                            BusinessName = "ABC Company",
                            ConcurrencyStamp = "f3dd61f9-94ce-4a41-af0f-0dfb932b6f98",
                            ConfirmPassword = "Password@123",
                            ContactName = "Jane Doe",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 515, DateTimeKind.Unspecified).AddTicks(9521), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "john.doe@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            ImageUrl = "https://images.unsplash.com/photo-1633332755192-727a05c4013d?q=80&w=1780&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@GMAIL.COM",
                            NormalizedUserName = "JOHN.DOE@GMAIL.COM",
                            Occupation = "Developer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCKKyxY2Y4h7AVZY9vt+IvpyW1L5CCeAQdlFRwT1hHtM41UTymyb3NS6ohWdq6EyA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_1",
                            SecurityStamp = "a01c6f11-fc86-4eb2-a785-d0806262fcbb",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 515, DateTimeKind.Unspecified).AddTicks(9529), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "john.doe@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_2",
                            AccessFailedCount = 0,
                            AddressId = "2",
                            BusinessName = "XYZ Company",
                            ConcurrencyStamp = "92bea39d-762f-4c9e-bb03-5ec4a7b855bb",
                            ConfirmPassword = "Password@123",
                            ContactName = "John Smith",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 564, DateTimeKind.Unspecified).AddTicks(2690), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "alice.smith@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            ImageUrl = "https://unsplash.com/photos/closeup-photography-of-woman-smiling-mEZ3PoFGs_k",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.SMITH@GMAIL.COM",
                            NormalizedUserName = "ALICE.SMITH@GMAIL.COM",
                            Occupation = "Designer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAELRScobVMatgZCsIXVAY8VH0PZSKqvV/q5L46gA1/06vxPtRX71kETX3VG3ms7bnOA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_2",
                            SecurityStamp = "5bee6181-043e-44ab-acf5-4f0f465397c6",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 564, DateTimeKind.Unspecified).AddTicks(2691), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "alice.smith@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_3",
                            AccessFailedCount = 0,
                            AddressId = "3",
                            BusinessName = "EFG Enterprises",
                            ConcurrencyStamp = "63a8f3ed-3bae-49d8-8a16-24701aef7770",
                            ConfirmPassword = "Password@123",
                            ContactName = "Michael Johnson",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 607, DateTimeKind.Unspecified).AddTicks(3037), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emily.johnson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            ImageUrl = "https://www.istockphoto.com/photo/headshot-portrait-of-smiling-male-employee-in-office-gm1309328823-399075075",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY.JOHNSON@GMAIL.COM",
                            NormalizedUserName = "EMILY.JOHNSON@GMAIL.COM",
                            Occupation = "Writer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOhNGU9nqy3U61W2n/OhG8bUBD0E08G7rtgDqn8xNj5C7Tq9cFhnN901CoV32ZSRvA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_3",
                            SecurityStamp = "71d9f413-65c0-4d0c-b0a8-5b7472c4ca0d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 607, DateTimeKind.Unspecified).AddTicks(3037), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emily.johnson@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_4",
                            AccessFailedCount = 0,
                            AddressId = "4",
                            BusinessName = "DB Tech",
                            ConcurrencyStamp = "377112c0-0aa7-44c7-9ab8-15a0e573df1f",
                            ConfirmPassword = "Password@123",
                            ContactName = "Emma Brown",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 654, DateTimeKind.Unspecified).AddTicks(8572), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "david.brown@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "David",
                            ImageUrl = "https://example.com/david.jpg",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.BROWN@GMAIL.COM",
                            NormalizedUserName = "DAVID.BROWN@GMAIL.COM",
                            Occupation = "Engineer",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0XVsWP3JUTwxGUH0c2/yFQydzp+OPXeVMV+FN0lGZOG2M16nLhVMEa/BRYhTbUQw==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_4",
                            SecurityStamp = "4c3cbef9-dbcd-4c1b-855e-ec4a78dc890e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 654, DateTimeKind.Unspecified).AddTicks(8575), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "david.brown@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_5",
                            AccessFailedCount = 0,
                            AddressId = "5",
                            BusinessName = "Artistic Creations",
                            ConcurrencyStamp = "d4c1ede9-d3a7-4a6d-8ccc-c81420f88670",
                            ConfirmPassword = "Password@123",
                            ContactName = "Daniel Martinez",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 702, DateTimeKind.Unspecified).AddTicks(801), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "sophia.martinez@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            ImageUrl = "https://example.com/sophia.jpg",
                            LastName = "Martinez",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIA.MARTINEZ@GMAIL.COM",
                            NormalizedUserName = "SOPHIA.MARTINEZ@GMAIL.COM",
                            Occupation = "Artist",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6nQSfLjDmBlCHafPb2y6FpHvPMWdSdrG2/KBPcguvP9N/Ys48vCQFNtyYnZkrf8w==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_5",
                            SecurityStamp = "312113e3-9d11-40d7-972f-abfd3e0a31e2",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 702, DateTimeKind.Unspecified).AddTicks(802), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "sophia.martinez@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_6",
                            AccessFailedCount = 0,
                            AddressId = "6",
                            BusinessName = "Lee Marketing Solutions",
                            ConcurrencyStamp = "d09acb0a-e6df-4918-b770-32dbf36ed12a",
                            ConfirmPassword = "Password@123",
                            ContactName = "Olivia Lee",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 749, DateTimeKind.Unspecified).AddTicks(5950), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "james.lee@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            ImageUrl = "https://example.com/james.jpg",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.LEE@GMAIL.COM",
                            NormalizedUserName = "JAMES.LEE@GMAIL.COM",
                            Occupation = "Marketing Manager",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAAx227mOOEu5Y4gMTKRqYaUnOZaWHPk6iAF1J+S6Ni9FAdFsQCah44/yBignxb2IQ==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_6",
                            SecurityStamp = "0232a0ea-57f1-4c28-b6a9-2450ef1de455",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 749, DateTimeKind.Unspecified).AddTicks(5951), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "james.lee@gmail.com"
                        },
                        new
                        {
                            Id = "user_id_7",
                            AccessFailedCount = 0,
                            AddressId = "7",
                            BusinessName = "Educational Institute",
                            ConcurrencyStamp = "c567a698-d09d-4e46-9c8a-c34049e16824",
                            ConfirmPassword = "Password@123",
                            ContactName = "Noah Wilson",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(1704), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "emma.wilson@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emma",
                            ImageUrl = "https://example.com/emma.jpg",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.WILSON@GMAIL.COM",
                            NormalizedUserName = "EMMA.WILSON@GMAIL.COM",
                            Occupation = "Teacher",
                            Password = "Password@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIPxJsCQiyisfRAn41R9LYANVeDwcvHEJg8/ORzU4Vb0HfN+Pt5RDsx4KXJXmBhyPA==",
                            PhoneNumberConfirmed = false,
                            PublicId = "public_id_7",
                            SecurityStamp = "f592ad06-014f-4dea-b385-f78f858e1690",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(1707), new TimeSpan(0, 0, 0, 0, 0)),
                            UserName = "emma.wilson@gmail.com"
                        });
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AddressId = "1",
                            CompanyName = "Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2194), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2195), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_1",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "2",
                            AddressId = "2",
                            CompanyName = "Second Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2200), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2202), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_2",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "3",
                            AddressId = "3",
                            CompanyName = "Third Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2205), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2206), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_3",
                            VendorType = 1
                        },
                        new
                        {
                            Id = "4",
                            AddressId = "4",
                            CompanyName = "Fourth Vendor Company",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2210), new TimeSpan(0, 0, 0, 0, 0)),
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 6, 19, 8, 54, 40, 798, DateTimeKind.Unspecified).AddTicks(2211), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = "user_id_4",
                            VendorType = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Billboard", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_360AdsNG.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.User", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("_360AdsNG.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("_360AdsNG.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("_360AdsNG.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
